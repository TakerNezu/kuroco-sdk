import * as firebase from 'firebase/app';
import { {{firebaseTokenApi.className}} } from '../services/{{firebaseTokenApi.className}}';

const firebaseConfig = {
    {{#each firebaseConfig}}
        '{{@key}}': '{{this}}',
    {{/each}}
};

/**
 * Create Uploader.
 */
export class UploaderFactory {
    public static async create(params: {{firebaseTokenApi.className}}.{{firebaseTokenApi.methodName}}Request): Promise<Uploader> {
        const res = await AuthenticationService.getAuthenticationServiceRcmsApi1FirebaseToken(params);
        const { token } = await res.json();

        firebase.initializeApp(firebaseConfig);
        await firebase.auth().signInWithCustomToken(token);
        const storage = firebase.storage();

        return new FirebaseStorageUploader(storage);
    }
}

/**
 * Uploader using firebase storage.
 */
class FirebaseStorageUploader implements Uploader {
    constructor(private firebaseStorage: firebase.storage.Storage) {}

    public async upload(file: File) {
        const ref = this.firebaseStorage.ref('/files/temp');
        const url = await ref.child('1589879961388_252_closepng__rcms_gcs_upload_chunk_number__0').getDownloadURL();
        return url;
    }
}

export interface Uploader {
    upload: (file: File) => Promise<any>;
}

